@startuml

skinparam stereotypeCBackgroundColor<<std::runtime_error>> Red
skinparam stereotypeCBackgroundColor<<exception>> Red

title Nullable Classes

namespace rsp {

class ENullableException <<std::runtime_error>> {
}

class ENullValueError <<exception>> {
    Value is null
}

class ETypeMismatchError <<exception>> {
    Value types are not the
    same
}

ENullableException <|-- ENullValueError
ENullableException <|-- ETypeMismatchError


class EVariantException <<std::runtime_error>> {
}

class EConversionError <<exception>> {
}

EVariantException <|-- EConversionError

abstract Nullable {
    +{abstract} ~Nullable()
    +{abstract} IsNull() : bool
    +{abstract} Clear()
}


class StructElement<class T> {
    Helper template class to use in data
    structures where elements can have a
    "Not Set" value.
    Also implements helpers for difference
    check with margins.
--
    +StructElement()
    +StructElement(const T& aValue)

    +IsNull() : bool
    +Clear()

    +Get() const : T
    +Get(arDefault: const T&) const : T
    +operator T() const : T

    +Set(aValue:T)
    +operator =(aValue:const T&) : StructElement<T>&

    +Compare(aValue:const T&) const : bool

    +SetMargin(aValue:T)

    #differs(aVal1:double, aVal2:double, aMargin:double) const : bool
    #differs(aVal1:float, aVal2:float, aMargin:float) const : bool
    #differs(aVal1:int, aVal2:int, aMargin:int) const : bool
    #differs(aVal1:bool, aVal2:bool, 0:bool) const : bool
}

enum Variant::Types {
    Null
    Bool
    Int
    Int64
    Uint64
    Uint32
    Float
    Double
    Pointer
    String
}

class Variant {
    Generic type. Can hold all primitive type values
    or pointer to complex types.
--
    +Variant()
    +Variant(aValue: bool)
    +Variant(aValue: int)
    +Variant(aValue: std::int64_t)
    +Variant(aValue: std::uint64_t)
    +Variant(aValue: std::uint32_t)
    +Variant(aValue: float)
    +Variant(aValue: double)
    +Variant(apValue: void*)
    +Variant(arValue: const std::string&)
    +Variant(apValue: const char*)
    +{abstract} ~Variant()

    +IsNull() const : bool
    +Clear()
    +GetType() const : Types

    +operator bool() const : bool
    +operator int() const : int
    +operator std::int64_t() const : std::int64_t
    +operator std::uint64_t() const : std::uint64_t
    +operator std::uint32_t() const : std::uint32_t
    +operator float() const : float
    +operator double() const : double
    +operator void*() const : void*
    +operator const std::string() const : std::string
    +operator const char*() const : const char*

    +operator =(aValue: bool) : Variant&
    +operator =(aValue: int) : Variant&
    +operator =(aValue: std::int64_t) : Variant&
    +operator =(aValue: std::uint64_t) : Variant&
    +operator =(aValue: std::uint32_t) : Variant&
    +operator =(aValue: float) : Variant&
    +operator =(aValue: double) : Variant&
    +operator =(apValue: void*) : Variant&
    +operator =(arValue: const std::string&) : Variant&
    +operator =(apValue: const char*) : Variant&

    +AsBool() const : bool
    +AsInt() const : std::int64_t
    +AsDouble() const : double
    +AsString() const : std::string
    +AsPointer() const : void*
}

Nullable <|-- StructElement
Nullable <|-- Variant

Variant <-down[hidden]- EVariantException
StructElement <-down[hidden]- ENullableException

}

@enduml
