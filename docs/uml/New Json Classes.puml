@startuml

skinparam stereotypeCBackgroundColor<<Exception>> Red
skinparam stereotypeCBackgroundColor<<std::runtime_error>> Red
'hide stereotype

title Proposal for new JSON Classes

namespace rsp {

enum JsonTypes {
    Null
    Bool
    Number
    String
    Object
    Array
}

class JsonBase {
    #mType: JsonTypes
--
    +JsonBase(aType: JsonStypes)
    
    +GetJsonType() const : JsonTypes
    +GetJsonTypeAsString() const : string
    
    +IsNull(): bool
    +IsBool(): bool
    +IsNumber(): bool
    +IsString(): bool
    +IsArray(): bool
    +IsObject(): bool
}

class JsonNull {
    +JsonNull()
}

class JsonString {
    #mValue: string
    --
    +JsonString(aValue: string = "")
    +operator=(aValue: string&): JsonNumber&
    +operator string() : string
}

class JsonNumber {
    #mValue: variant<int64,double>
    --
    +JsonNumber(aValue: int64 = 0)
    +JsonNumber(aValue: double)

    +operator=(aValue: int64): JsonNumber&
    +operator=(aValue: double): JsonNumber&
    
    +operator int() : int64
    +operator double() : double
    
    +IsInt(): bool
    +IsDouble(): bool
}

class JsonBool {
    #mValue: bool
    --
    +JsonBool(aValue: bool = false)
    +operator bool() : bool
}

class JsonArray {
    #mValue: vector<JsonValue>
    --
    +JsonArray()

    +GetCount() const : std::size_t
    +operator[](aIndex:int) : JsonValue&

    +Add(apValue:JsonValue*) : JsonValue&
    +Remove(aIndex:int) : JsonValue&
    +Clear()
}

class JsonObject {
    #mMembers: InsertOrderedMap<JsonValue>
    --
    +JsonObject()

    +GetCount() const : std::size_t
    +MemberExists(arName:const std::string&) const : bool

    +operator[](apName:const char*) : JsonValue&
    +operator[](arName:const std::string&) : JsonValue&

    +Add(arName:const std::string&, apValue:JsonValue*) : JsonValue&
    +Remove(arName:const std::string&) : JsonValue&
    +Clear()
}

class JsonEncoder {
    +JsonEncoder(aValue: const JsonValue&, aPrettyPrint:bool = false, aForceToUCS2:bool = false) : UTF8String
}

class JsonDecoder {
    +JsonDecoder(aRawString: const UTF8String&)
}

class JsonValue {
    #mValue: variant<JsonNull, JsonString, JsonNumber, JsonBool, JsonArray, JsonBoject>
    --
    +JsonValue()
    +JsonValue(aValue: JsonString)
    +JsonValue(aValue: JsonNumber)
    +JsonValue(aValue: JsonBool)
    +JsonValue(aValue: JsonArray)
    +JsonValue(aValue: JsonObject)
    +virtual ~JsonValue()

    +operator=(aValue:JsonNull) : JsonValue&
    +operator=(aValue:JsonString) : JsonValue&
    +operator=(aValue:JsonNumber) : JsonValue&
    +operator=(aValue:JsonBool) : JsonValue&
    +operator=(aValue:JsonArray) : JsonValue&
    +operator=(aValue:JsonObject) : JsonValue&

    +AsString() const : JsonString&
    +AsNumber() const : JsonNumber&
    +AsBool() const : JsonBool&
    +AsArray() const : JsonArray&
    +AsObject() const : JsonObject&
}


class Json {
    Gateway class to all JSON operations.
    Both moveable and copyable.
    --
    #mValue: JsonValue
    --
    Json()
    virtual ~Json();

    MakeObject(): JsonObject&
    MakeArray(): JsonArray&

    Decode(arJson: const std::string&);
    Encode(aPrettyPrint: bool = false) const: std::string

    Get() const: JsonValue&
    Clear(): Json&
}

class EJsonException <<std::runtime_error>> {
    Base class for all
    JSON exceptions
}

class EJsonParseError <<Exception>> {
    Thrown if a JSON element
    is not spelled correctly:
    true, false, null, or if
    string contains illegal
    escape codes.
}

class EJsonNumberError <<Exception>> {
    Thrown if a JSON number
    element contains illegal
    characters.
}

class EJsonTypeError <<Exception>> {
    Thrown if a JsonValue is
    accessed as an array or
    object, but the value can
    not be converted to either.
}

class EInstanceExists <<Exception>> {
    Thrown if content have already been
    created in Json object, and either of
    MakeObject or MakeArray is invoked.
}

class ENoInstanceExists <<Exception>> {
    Thrown when trying to get a content
    reference from an empty Json object.
}

JsonEncoder -down[hidden]- EJsonException

EJsonException <|-- EJsonParseError
EJsonException <|-- EJsonTypeError
EJsonException <|-- EJsonNumberError
EJsonException <|-- EInstanceExists
EJsonException <|-- ENoInstanceExists

JsonTypes o-- JsonBase

JsonBase <|-- JsonNull
JsonBase <|-- JsonString
JsonBase <|-- JsonNumber
JsonBase <|-- JsonBool
JsonBase <|-- JsonArray
JsonBase <|-- JsonObject

JsonNull o-- JsonValue
JsonBool o-- JsonValue
JsonString o-- JsonValue
JsonNumber o-- JsonValue
JsonArray o-down-o JsonValue
JsonObject o-down-o JsonValue

JsonEncoder -left[hidden]- JsonValue
JsonDecoder o-- Json
JsonValue o-- Json
JsonEncoder o-- Json
}

@enduml
