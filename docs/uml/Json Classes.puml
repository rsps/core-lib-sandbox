@startuml

skinparam stereotypeCBackgroundColor<<Exception>> Red
skinparam stereotypeCBackgroundColor<<std::runtime_error>> Red
'hide stereotype

title JSON Classes

namespace rsp {

enum JsonTypes {
    Null
    Bool
    Number
    String
    Object
    Array
}

class Variant

class JsonValue {
    +{static} Decode(apJson:const char*) : JsonValue*
    +{static} Decode(arJson:const UTF8String&) : JsonValue*
    +{static} Decode(arJson:UTF8String&) : JsonValue*
    +Encode(aPrettyPrint:bool = false) : UTF8String

    +JsonValue()
    +JsonValue<T>(aValue:T)
    +virtual ~JsonValue()

    +GetJsonType() const : JsonTypes
    +operator<T> =(aValue:T) : JsonValue&

    +AsArray() const : JsonArray&
    +AsObject() const : JsonObject&
}

class JsonArray {
    +GetCount() const : std::size_t
    +operator[](aIndex:int) : JsonValue&

    +Add(apValue:JsonValue*) : JsonValue&
    +Remove(aIndex:int) : JsonValue&
    +Clear()
}

class JsonObject {
    +GetCount() const : std::size_t
    +MemberExists(arName:const std::string&) const : bool

    +operator[](apName:const char*) : JsonValue&
    +operator[](arName:const std::string&) : JsonValue&

    +Add(arName:const std::string&, apValue:JsonValue*) : JsonValue&
    +Remove(arName:const std::string&) : JsonValue&
    +Clear()
}

class JsonString {
    Used to traverse and decoder a JSON formatted string
    --
    +GetValue(): JsonValue*
}

class Json {
    Gateway class to all JSON operations.
    Both moveable and copyable.
    --
    #mValue: JsonValue
    --
    Json()
    virtual ~Json();

    MakeObject(): JsonObject&
    MakeArray(): JsonArray&

    Decode(arJson: const std::string&);
    Encode(aPrettyPrint: bool = false) const: std::string

    Get() const: JsonValue&
    Clear(): Json&
}

class EJsonException <<std::runtime_error>> {
    Base class for all
    JSON exceptions
}

class EJsonParseError <<Exception>> {
    Thrown if a JSON element
    is not spelled correctly:
    true, false, null, or if
    string contains illegal
    escape codes.
}

class EJsonNumberError <<Exception>> {
    Thrown if a JSON number
    element contains illegal
    characters.
}

class EJsonTypeError <<Exception>> {
    Thrown if a JsonValue is
    accessed as an array or
    object, but the value can
    not be converted to either.
}

class EInstanceExists <<Exception>> {
    Thrown if content have already been
    created in Json object, and either of
    MakeObject or MakeArray is invoked.
}

class ENoInstanceExists <<Exception>> {
    Thrown when trying to get a content
    reference from an empty Json object.
}

JsonObject -down[hidden]- EJsonException

EJsonException <|-- EJsonParseError
EJsonException <|-- EJsonTypeError
EJsonException <|-- EJsonNumberError
EJsonException <|-- EInstanceExists
EJsonException <|-- ENoInstanceExists

std::string <|-- JsonString
JsonString o-- Json

Variant <|-- JsonValue
JsonValue <|-- JsonArray
JsonValue <|-- JsonObject
JsonValue o-- Json
JsonArray o-- JsonValue
JsonObject o-- JsonValue

}

@enduml
